# Generated by Django 3.1.5 on 2024-05-19 16:03

import django.contrib.gis.db.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AntyglPritok',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('wt_wl_degc', models.FloatField(blank=True, db_column='WT_WL_degC', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('ec_uncomp_micros_cm', models.FloatField(blank=True, db_column='EC_uncomp_microS/cm', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'antygl_pritok',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BreznickyPotok',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('gr_w_m2', models.FloatField(blank=True, db_column='GR_W/m2', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('rh_pct', models.FloatField(blank=True, db_column='RH_pct', null=True)),
                ('ws_m_s', models.FloatField(blank=True, db_column='WS_m/s', null=True)),
                ('wd_deg', models.FloatField(blank=True, db_column='WD_deg', null=True)),
                ('rx_mv', models.FloatField(blank=True, db_column='RX_mV', null=True)),
                ('wt_rx_degc', models.FloatField(blank=True, db_column='WT_RX_degC', null=True)),
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('ph', models.FloatField(blank=True, db_column='pH_-', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('ec_uncomp_micros_cm', models.FloatField(blank=True, db_column='EC_uncomp_microS/cm', null=True)),
                ('wt_ec_degc', models.FloatField(blank=True, db_column='WT_EC_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'breznicky_potok',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CernyPotok',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('rx_mv', models.FloatField(blank=True, db_column='RX_mV', null=True)),
                ('wt_red_degc', models.FloatField(blank=True, db_column='WT_red_degC', null=True)),
                ('ph', models.FloatField(blank=True, db_column='pH_-', null=True)),
                ('wt_ph_degc', models.FloatField(blank=True, db_column='WT_pH_degC', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('ec_uncomp_micros_cm', models.FloatField(blank=True, db_column='EC_uncomp_microS/cm', null=True)),
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'cerny_potok',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CikanskyPotok',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('ph', models.FloatField(blank=True, db_column='pH_-', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('ec_uncomp_micros_cm', models.FloatField(blank=True, db_column='EC_uncomp_microS/cm', null=True)),
                ('wt_ec_degc', models.FloatField(blank=True, db_column='WT_EC_degC', null=True)),
                ('wt_ph_degc', models.FloatField(blank=True, db_column='WT_pH_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'cikansky_potok',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Filipohutsky',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('ec_uncomp_micros_cm', models.FloatField(blank=True, db_column='EC_uncomp_microS/cm', null=True)),
                ('wt_ec_degc', models.FloatField(blank=True, db_column='WT_EC_degC', null=True)),
                ('ph', models.FloatField(blank=True, db_column='pH_-', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'filipohutsky',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HrabeciCesta',
            fields=[
                ('at20_degc', models.FloatField(blank=True, db_column='AT20_degC', null=True)),
                ('rh20_pct', models.FloatField(blank=True, db_column='RH20_pct', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('rh_pct', models.FloatField(blank=True, db_column='RH_pct', null=True)),
                ('ws_m_s', models.FloatField(blank=True, db_column='WS_m/s', null=True)),
                ('hs_cm', models.FloatField(blank=True, db_column='HS_cm', null=True)),
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('ws_2_m_s', models.FloatField(blank=True, db_column='WS_2_m/s', null=True)),
                ('sm10_pct', models.FloatField(blank=True, db_column='SM10_pct', null=True)),
                ('st10_degc', models.FloatField(blank=True, db_column='ST10_degC', null=True)),
                ('sm25_pct', models.FloatField(blank=True, db_column='SM25_pct', null=True)),
                ('st25_degc', models.FloatField(blank=True, db_column='ST25_degC', null=True)),
                ('sm60_pct', models.FloatField(blank=True, db_column='SM60_pct', null=True)),
                ('st60_degc', models.FloatField(blank=True, db_column='ST60_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'hrabeci_cesta',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HrebecnaMeteo',
            fields=[
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('rh_pct', models.FloatField(blank=True, db_column='RH_pct', null=True)),
                ('hs_mm', models.FloatField(blank=True, db_column='HS_mm', null=True)),
                ('gr_w_m2', models.FloatField(blank=True, db_column='GR_W/m2', null=True)),
                ('ws_m_s', models.FloatField(blank=True, db_column='WS_m/s', null=True)),
                ('wd_deg', models.FloatField(blank=True, db_column='WD_deg', null=True)),
                ('gt05_degc', models.FloatField(blank=True, db_column='GT05_degC', null=True)),
                ('at50_degc', models.FloatField(blank=True, db_column='AT50_degC', null=True)),
                ('at20_degc', models.FloatField(blank=True, db_column='AT20_degC', null=True)),
                ('sm60_pct', models.FloatField(blank=True, db_column='SM60_pct', null=True)),
                ('sm30_pct', models.FloatField(blank=True, db_column='SM30_pct', null=True)),
                ('sm15_pct', models.FloatField(blank=True, db_column='SM15_pct', null=True)),
                ('st60_degc', models.FloatField(blank=True, db_column='ST60_degC', null=True)),
                ('st30_degc', models.FloatField(blank=True, db_column='ST30_degC', null=True)),
                ('st15_degc', models.FloatField(blank=True, db_column='ST15_degC', null=True)),
                ('at25_degc', models.FloatField(blank=True, db_column='AT25_degC', null=True)),
                ('at75_degc', models.FloatField(blank=True, db_column='AT75_degC', null=True)),
                ('at100_degc', models.FloatField(blank=True, db_column='AT100_degC', null=True)),
                ('grout_w_m2', models.FloatField(blank=True, db_column='GRout_W/m2', null=True)),
                ('ws_2_m_s', models.FloatField(blank=True, db_column='WS_2_m/s', null=True)),
                ('wd_2_deg', models.FloatField(blank=True, db_column='WD_2_deg', null=True)),
                ('wsmax_m_s', models.FloatField(blank=True, db_column='WSmax_m/s', null=True)),
                ('wsmin_m_s', models.FloatField(blank=True, db_column='WSmin_m/s', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'hrebecna_meteo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Javori',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('q_m3_s', models.FloatField(blank=True, db_column='Q_m3/s', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('sm_41_pct', models.FloatField(blank=True, db_column='SM_41_pct', null=True)),
                ('st_42_degc', models.FloatField(blank=True, db_column='ST_42_degC', null=True)),
                ('sm_43_pct', models.FloatField(blank=True, db_column='SM_43_pct', null=True)),
                ('st_44_degc', models.FloatField(blank=True, db_column='ST_44_degC', null=True)),
                ('sm_45_pct', models.FloatField(blank=True, db_column='SM_45_pct', null=True)),
                ('st_46_degc', models.FloatField(blank=True, db_column='ST_46_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'javori',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='JavoriPila',
            fields=[
                ('hs_cm', models.FloatField(blank=True, db_column='HS_cm', null=True)),
                ('swe_mm', models.BigIntegerField(blank=True, db_column='SWE_mm', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('rh_pct', models.FloatField(blank=True, db_column='RH_pct', null=True)),
                ('hs_laser_cm', models.FloatField(blank=True, db_column='HS_laser_cm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'javori_pila',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Kremelna',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'kremelna',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoseniceRejstejn',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'losenice_rejstejn',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ModravaMeteoH7',
            fields=[
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('rh_pct', models.FloatField(blank=True, db_column='RH_pct', null=True)),
                ('hs_cm', models.FloatField(blank=True, db_column='HS_cm', null=True)),
                ('gr_w_m2', models.FloatField(blank=True, db_column='GR_W/m2', null=True)),
                ('grout_w_m2', models.FloatField(blank=True, db_column='GRout_W/m2', null=True)),
                ('swe_mm', models.FloatField(blank=True, db_column='SWE_mm', null=True)),
                ('ws_m_s', models.FloatField(blank=True, db_column='WS_m/s', null=True)),
                ('wd_deg', models.FloatField(blank=True, db_column='WD_deg', null=True)),
                ('ws_2_m_s', models.FloatField(blank=True, db_column='WS_2_m/s', null=True)),
                ('wd_2_deg', models.FloatField(blank=True, db_column='WD_2_deg', null=True)),
                ('wsmax_m_s', models.FloatField(blank=True, db_column='WSmax_m/s', null=True)),
                ('wsmin_m_s', models.FloatField(blank=True, db_column='WSmin_m/s', null=True)),
                ('rh_2_pct', models.FloatField(blank=True, db_column='RH_2_pct', null=True)),
                ('at_2_degc', models.FloatField(blank=True, db_column='AT_2_degC', null=True)),
                ('atmin_2_degc', models.FloatField(blank=True, db_column='ATmin_2_degC', null=True)),
                ('atmax_2_degc', models.FloatField(blank=True, db_column='ATmax_2_degC', null=True)),
                ('sm10_pct', models.FloatField(blank=True, db_column='SM10_pct', null=True)),
                ('st10_degc', models.FloatField(blank=True, db_column='ST10_degC', null=True)),
                ('sm25_pct', models.FloatField(blank=True, db_column='SM25_pct', null=True)),
                ('st25_degc', models.FloatField(blank=True, db_column='ST25_degC', null=True)),
                ('sm60_pct', models.FloatField(blank=True, db_column='SM60_pct', null=True)),
                ('st60_degc', models.FloatField(blank=True, db_column='ST60_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'modrava_meteo_h7',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Modravsky',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('ec_uncomp_micros_cm', models.FloatField(blank=True, db_column='EC_uncomp_microS/cm', null=True)),
                ('wt_ec_degc', models.FloatField(blank=True, db_column='WT_EC_degC', null=True)),
                ('ph', models.FloatField(blank=True, db_column='pH_-', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'modravsky',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Netradio1',
            fields=[
                ('gr_w_m2', models.FloatField(blank=True, db_column='GR_W/m2', null=True)),
                ('grout_w_m2', models.FloatField(blank=True, db_column='GRout_W/m2', null=True)),
                ('lwin_w_m2', models.FloatField(blank=True, db_column='LWin_W/m2', null=True)),
                ('lwout_w_m2', models.FloatField(blank=True, db_column='LWout_W/m2', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'netradio_1',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Netradio2',
            fields=[
                ('gr_w_m2', models.FloatField(blank=True, db_column='GR_W/m2', null=True)),
                ('grout_w_m2', models.FloatField(blank=True, db_column='GRout_W/m2', null=True)),
                ('lwin_w_m2', models.FloatField(blank=True, db_column='LWin_W/m2', null=True)),
                ('lwout_w_m2', models.FloatField(blank=True, db_column='LWout_W/m2', null=True)),
                ('hs_mm', models.FloatField(blank=True, db_column='HS_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'netradio_2',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Netradio3',
            fields=[
                ('gr_w_m2', models.FloatField(blank=True, db_column='GR_W/m2', null=True)),
                ('grout_w_m2', models.FloatField(blank=True, db_column='GRout_W/m2', null=True)),
                ('lwin_w_m2', models.FloatField(blank=True, db_column='LWin_W/m2', null=True)),
                ('lwout_w_m2', models.FloatField(blank=True, db_column='LWout_W/m2', null=True)),
                ('hs_mm', models.FloatField(blank=True, db_column='HS_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'netradio_3',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PrasilskyPot',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'prasilsky_pot',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ptaci',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('q_m3_s', models.FloatField(blank=True, db_column='Q_m3/s', null=True)),
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('hs_cm', models.FloatField(blank=True, db_column='HS_cm', null=True)),
                ('st10_degc', models.FloatField(blank=True, db_column='ST10_degC', null=True)),
                ('gt05_degc', models.FloatField(blank=True, db_column='GT05_degC', null=True)),
                ('at40_degc', models.FloatField(blank=True, db_column='AT40_degC', null=True)),
                ('at80_degc', models.FloatField(blank=True, db_column='AT80_degC', null=True)),
                ('at120_degc', models.FloatField(blank=True, db_column='AT120_degC', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('wl_2_mm', models.FloatField(blank=True, db_column='WL_2_mm', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('ph', models.FloatField(blank=True, db_column='pH_-', null=True)),
                ('wt_ph_degc', models.FloatField(blank=True, db_column='WT_pH_degC', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('ec_uncomp_micros_cm', models.FloatField(blank=True, db_column='EC_uncomp_microS/cm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ptaci',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PtaciSpa',
            fields=[
                ('hs_cm', models.BigIntegerField(blank=True, db_column='HS_cm', null=True)),
                ('at120_degc', models.FloatField(blank=True, db_column='AT120_degC', null=True)),
                ('at90_degc', models.FloatField(blank=True, db_column='AT90_degC', null=True)),
                ('at60_degc', models.FloatField(blank=True, db_column='AT60_degC', null=True)),
                ('at30_degc', models.FloatField(blank=True, db_column='AT30_degC', null=True)),
                ('gt05_degc', models.FloatField(blank=True, db_column='GT05_degC', null=True)),
                ('st10_degc', models.FloatField(blank=True, db_column='ST10_degC', null=True)),
                ('swe_mm', models.FloatField(blank=True, db_column='SWE_mm', null=True)),
                ('rh_pct', models.FloatField(blank=True, db_column='RH_pct', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ptaci_spa',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PtaiPotokIsco',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ptaсi_potok_isco',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RanklovskyPotok',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('ph', models.FloatField(blank=True, db_column='pH_-', null=True)),
                ('wt_ph_degc', models.FloatField(blank=True, db_column='WT_pH_degC', null=True)),
                ('do_mg_l', models.FloatField(blank=True, db_column='DO_mg/l', null=True)),
                ('wt_do_degc', models.FloatField(blank=True, db_column='WT_DO_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ranklovsky_potok',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoklanskyPot',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('q_m3_s', models.FloatField(blank=True, db_column='Q_m3/s', null=True)),
                ('ec_3_micros_cm', models.FloatField(blank=True, db_column='EC_3_microS/cm', null=True)),
                ('ec_4_micros_cm', models.FloatField(blank=True, db_column='EC_4_microS/cm', null=True)),
                ('ec_5_micros_cm', models.FloatField(blank=True, db_column='EC_5_microS/cm', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'roklansky_pot',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Rokytka',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('q_m3_s', models.FloatField(blank=True, db_column='Q_m3/s', null=True)),
                ('hs_cm', models.FloatField(blank=True, db_column='HS_cm', null=True)),
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('swe_mm', models.FloatField(blank=True, db_column='SWE_mm', null=True)),
                ('ph', models.FloatField(blank=True, db_column='pH_-', null=True)),
                ('wt_ph_degc', models.FloatField(blank=True, db_column='WT_pH_degC', null=True)),
                ('rx_mv', models.FloatField(blank=True, db_column='RX_mV', null=True)),
                ('wt_ecdegc', models.FloatField(blank=True, db_column='WT_ECdegC', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('ec_uncomp_micros_cm', models.FloatField(blank=True, db_column='EC_uncomp_microS/cm', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('rh_pct', models.FloatField(blank=True, db_column='RH_pct', null=True)),
                ('ws_m_s', models.FloatField(blank=True, db_column='WS_m/s', null=True)),
                ('wd_deg', models.FloatField(blank=True, db_column='WD_deg', null=True)),
                ('ws_2_m_s', models.FloatField(blank=True, db_column='WS_2_m/s', null=True)),
                ('wd_2_deg', models.FloatField(blank=True, db_column='WD_2_deg', null=True)),
                ('wsmax_m_s', models.FloatField(blank=True, db_column='WSmax_m/s', null=True)),
                ('wsmin_m_s', models.FloatField(blank=True, db_column='WSmin_m/s', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'rokytka',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SebestianMeteo',
            fields=[
                ('ws_m_s', models.FloatField(blank=True, db_column='WS_m/s', null=True)),
                ('wd_deg', models.FloatField(blank=True, db_column='WD_deg', null=True)),
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('rh_pct', models.FloatField(blank=True, db_column='RH_pct', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('gr_w_m2', models.FloatField(blank=True, db_column='GR_W/m2', null=True)),
                ('st10_degc', models.FloatField(blank=True, db_column='ST10_degC', null=True)),
                ('gt05_degc', models.FloatField(blank=True, db_column='GT05_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sebestian_meteo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SlatinnyKh',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('wl_2_mm', models.FloatField(blank=True, db_column='WL_2_mm', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('ec_uncomp_micros_cm', models.FloatField(blank=True, db_column='EC_uncomp_microS/cm', null=True)),
                ('ph', models.FloatField(blank=True, db_column='pH_-', null=True)),
                ('wt_ph_degc', models.FloatField(blank=True, db_column='WT_pH_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'slatinny_kh',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SlatinnyPotok',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'slatinny_potok',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StationMetadata',
            fields=[
                ('st_name', models.TextField(blank=True, primary_key=True, serialize=False)),
                ('st_label', models.TextField(blank=True, null=True)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('long', models.FloatField(blank=True, null=True)),
                ('masl_m_field', models.BigIntegerField(blank=True, db_column='masl (m)', null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'station_metadata',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tmavy',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('ec_lin_micros_cm', models.FloatField(blank=True, db_column='EC_lin_microS/cm', null=True)),
                ('ec_nonlin_micros_cm', models.FloatField(blank=True, db_column='EC_nonlin_microS/cm', null=True)),
                ('wt_ec_degc', models.FloatField(blank=True, db_column='WT_EC_degC', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'tmavy',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ValuesMetadata',
            fields=[
                ('parameter', models.TextField(db_column='Parameter', primary_key=True, serialize=False)),
                ('parameter_abreviation_in_data_file', models.TextField(db_column='Parameter abreviation in data file')),
                ('unit', models.TextField(blank=True, db_column='Unit', null=True)),
                ('django_field_name', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'values_metadata',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VolynkaMalenice',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'volynka_malenice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VolynkaVimperk',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'volynka_vimperk',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZhureckyPot',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'zhurecky_pot',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZlatyHubertky',
            fields=[
                ('swe_1_mm', models.FloatField(blank=True, db_column='SWE_1_mm', null=True)),
                ('swe_mm', models.FloatField(blank=True, db_column='SWE_mm', null=True)),
                ('hs_mm', models.FloatField(blank=True, db_column='HS_mm', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('hs_2_mm', models.FloatField(blank=True, db_column='HS_2_mm', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'zlaty_hubertky',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZlatyMeteoHlad',
            fields=[
                ('wl_mm', models.FloatField(blank=True, db_column='WL_mm', null=True)),
                ('p_mm', models.FloatField(blank=True, db_column='P_mm', null=True)),
                ('hs_cm', models.FloatField(blank=True, db_column='HS_cm', null=True)),
                ('at_degc', models.FloatField(blank=True, db_column='AT_degC', null=True)),
                ('rh_pct', models.FloatField(blank=True, db_column='RH_pct', null=True)),
                ('wt_degc', models.FloatField(blank=True, db_column='WT_degC', null=True)),
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'zlaty_meteo_hlad',
                'managed': False,
            },
        ),
    ]
